License_1.c
#include <string.h>
#include <stdio.h>

int main(int argc, char *argv[]) {
        if(argc==2) {
		printf("Checking License: %s\n", argv[1]);
		if(strcmp(argv[1], "AAAA-Z10N-42-OK")==0) {
			printf("Access Granted!\n");
		} else {
			printf("WRONG!\n");
		}
	} else {
		printf("Usage: <key>\n");
	}
	return 0;
} 
POINT_TO_CURRENT_LOCATION_ON_STACK
COMPARE_OR_CALL_FUNCTION
JMP_NOT_EQUALS_LOGICAL_IF_CONDITION
STATEMENT
License_1 Binary
   0x00000000004005bd <+0>:	push   rbp					Start Main
   0x00000000004005be <+1>:	mov    rbp,rsp
   0x00000000004005c1 <+4>:	sub    rsp,0x10
   0x00000000004005c5 <+8>:	mov    DWORD PTR [rbp-0x4],edi
   0x00000000004005c8 <+11>:	mov    QWORD PTR [rbp-0x10],rsi
   0x00000000004005cc <+15>:	cmp    DWORD PTR [rbp-0x4],0x2			Compares if value is number 2 then proceeds
   0x00000000004005d0 <+19>:	jne    0x400623 <main+102>			JMP to 623 if value is not equal to 0
   0x00000000004005d2 <+21>:	mov    rax,QWORD PTR [rbp-0x10]
   0x00000000004005d6 <+25>:	add    rax,0x8
   0x00000000004005da <+29>:	mov    rax,QWORD PTR [rax]
   0x00000000004005dd <+32>:	mov    rsi,rax
   0x00000000004005e0 <+35>:	mov    edi,0x4006c4
   0x00000000004005e5 <+40>:	mov    eax,0x0
   0x00000000004005ea <+45>:	call   0x400490 <printf@plt>			Checks License Key
   0x00000000004005ef <+50>:	mov    rax,QWORD PTR [rbp-0x10]
   0x00000000004005f3 <+54>:	add    rax,0x8
   0x00000000004005f7 <+58>:	mov    rax,QWORD PTR [rax]
   0x00000000004005fa <+61>:	mov    esi,0x4006da
   0x00000000004005ff <+66>:	mov    rdi,rax							
   0x0000000000400602 <+69>:	call   0x4004b0 <strcmp@plt>			string compare
   0x0000000000400607 <+74>:	test   eax,eax					EAX RAX is set to 0xe but setting to 0x0 will bypass license validation and grant access
   0x0000000000400609 <+76>:	jne    0x400617 <main+90>			If string does not equal to 0x0 then JMP to 617
   0x000000000040060b <+78>:	mov    edi,0x4006ea
   0x0000000000400610 <+83>:	call   0x400480 <puts@plt>			PUTS A MESSAGE "Access Granted!"
   0x0000000000400615 <+88>:	jmp    0x40062d <main+112>
   0x0000000000400617 <+90>:	mov    edi,0x4006fa				Proceeds to 61c
   0x000000000040061c <+95>:	call   0x400480 <puts@plt>			PUTS A MESSAGE "WRONG!"
   0x0000000000400621 <+100>:	jmp    0x40062d <main+112>
   0x0000000000400623 <+102>:	mov    edi,0x400701				Proceeds to 628
   0x0000000000400628 <+107>:	call   0x400480 <puts@plt>			PUTS A MESSAGE "Usage: <key>\n"
   0x000000000040062d <+112>:	mov    eax,0x0
   0x0000000000400632 <+117>:	leave  						Exit
   0x0000000000400633 <+118>:	ret    						return
